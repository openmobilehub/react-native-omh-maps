name: CD

on:
  push:
    branches:
      - main

# GITHUB_TOKEN needs to be granted the permissions required to make a Pages deployment
permissions:
  contents: read
  pages: write # to deploy to Pages
  id-token: write # to verify the deployment originates from an appropriate source

jobs:
  # this job sets up the dependencies in the monorepo & caches them and runs first
  # which speeds up the other jobs, as they will use the cached node_modules
  setup-monorepo:
    name: Setup monorepo
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup
        with:
          MAPBOX_SECRET_TOKEN: ${{ secrets.MAPBOX_SECRET_TOKEN }}
          MAPBOX_PUBLIC_TOKEN: ${{ secrets.MAPBOX_PUBLIC_TOKEN }}
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
          AZURE_MAPS_SUBSCRIPTION_KEY: ${{ secrets.AZURE_MAPS_SUBSCRIPTION_KEY }}

  build-documentation:
    needs: setup-monorepo
    # TODO: Fix in https://callstackio.atlassian.net/browse/OMHD-277
    if: false
    name: Build documentation
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup
        with:
          MAPBOX_SECRET_TOKEN: ${{ secrets.MAPBOX_SECRET_TOKEN }}
          MAPBOX_PUBLIC_TOKEN: ${{ secrets.MAPBOX_PUBLIC_TOKEN }}
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
          AZURE_MAPS_SUBSCRIPTION_KEY: ${{ secrets.AZURE_MAPS_SUBSCRIPTION_KEY }}

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Build documentation with Docusaurus
        run: yarn docs build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/build

  deploy-documentation:
    needs: build-documentation
    # TODO: Fix in https://callstackio.atlassian.net/browse/OMHD-277
    name: Deploy documentation to GitHub Pages
    runs-on: ubuntu-latest

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  sample-app-android:
    needs: setup-monorepo
    name: Build and publish Android app
    runs-on: ubuntu-latest

    env:
      TURBO_CACHE_DIR: .turbo/android
      APK_PATH: sample-app/android/app/build/outputs/apk/release/app-release.apk

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup
        with:
          MAPBOX_SECRET_TOKEN: ${{ secrets.MAPBOX_SECRET_TOKEN }}
          MAPBOX_PUBLIC_TOKEN: ${{ secrets.MAPBOX_PUBLIC_TOKEN }}
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
          AZURE_MAPS_SUBSCRIPTION_KEY: ${{ secrets.AZURE_MAPS_SUBSCRIPTION_KEY }}

      - name: Cache turborepo for Android
        uses: actions/cache@v4
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turborepo-android-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-turborepo-android-

      - name: Check turborepo cache for Android
        run: |
          TURBO_CACHE_STATUS=$(node -p "($(yarn turbo run build:android:release --cache-dir="${{ env.TURBO_CACHE_DIR }}" --dry=json)).tasks.find(t => t.task === 'build:android:release').cache.status")

          if [[ $TURBO_CACHE_STATUS == "HIT" ]]; then
            echo "turbo_cache_hit=1" >> $GITHUB_ENV
          fi

      - name: Finalize Android SDK
        if: env.turbo_cache_hit != 1
        run: |
          /bin/bash -c "yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses > /dev/null"

      - name: Cache Gradle
        if: env.turbo_cache_hit != 1
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('sample-app/android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build example for Android
        env:
          JAVA_OPTS: '-XX:MaxHeapSize=6g'
        run: |
          yarn turbo run build:android:release --cache-dir="${{ env.TURBO_CACHE_DIR }}"

      # Publishes the app to App Center
      - name: Publish app to App Center
        uses: wzieba/AppCenter-Github-Action@v1
        with:
          appName: ${{ secrets.APP_CENTER_APP_NAME }}
          group: ${{ secrets.APP_CENTER_GROUP }}
          token: ${{ secrets.APP_CENTER_TOKEN }}
          file: ${{ env.APK_PATH }}
          notifyTesters: true
          debug: true
          gitReleaseNotes: true

  # sample-app-ios:
  #   needs: setup-monorepo
  #   runs-on: macos-14
  #   env:
  #     TURBO_CACHE_DIR: .turbo/ios
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup
  #       uses: ./.github/actions/setup
  # with:
  #   MAPBOX_SECRET_TOKEN: ${{ secrets.MAPBOX_SECRET_TOKEN }}
  #   MAPBOX_PUBLIC_TOKEN: ${{ secrets.MAPBOX_PUBLIC_TOKEN }}
  #   GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
  #   AZURE_MAPS_SUBSCRIPTION_KEY: ${{ secrets.AZURE_MAPS_SUBSCRIPTION_KEY }}

  #     - name: Cache turborepo for iOS
  #       uses: actions/cache@v4
  #       with:
  #         path: ${{ env.TURBO_CACHE_DIR }}
  #         key: ${{ runner.os }}-turborepo-ios-${{ hashFiles('yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-turborepo-ios-

  #     - name: Check turborepo cache for iOS
  #       run: |
  #         TURBO_CACHE_STATUS=$(node -p "($(yarn turbo run build:ios --cache-dir="${{ env.TURBO_CACHE_DIR }}" --dry=json)).tasks.find(t => t.task === 'build:ios').cache.status")

  #         if [[ $TURBO_CACHE_STATUS == "HIT" ]]; then
  #           echo "turbo_cache_hit=1" >> $GITHUB_ENV
  #         fi

  #     - name: Cache cocoapods
  #       if: env.turbo_cache_hit != 1
  #       id: cocoapods-cache
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           **/ios/Pods
  #         key: ${{ runner.os }}-cocoapods-${{ hashFiles('sample-app/ios/Podfile.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cocoapods-

  #     - name: Install cocoapods
  #       if: env.turbo_cache_hit != 1 && steps.cocoapods-cache.outputs.cache-hit != 'true'
  #       run: |
  #         cd sample-app/ios
  #         pod install
  #       env:
  #         NO_FLIPPER: 1

  #     - name: Build example for iOS
  #       run: |
  #         yarn turbo run build:ios --cache-dir="${{ env.TURBO_CACHE_DIR }}"
