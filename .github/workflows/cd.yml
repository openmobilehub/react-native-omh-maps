name: Continuous Deployment

on:
  push:
    branches: [main, ci]
  workflow_dispatch:

env:
  SAMPLE_APP_PATH: 'apps/sample-app'

jobs:
  build-android-sample-app:
    name: Build Android Sample App

    runs-on: ubuntu-latest

    env:
      TURBO_CACHE_DIR: .turbo/android

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup
        with:
          MAPBOX_SECRET_TOKEN: ${{ secrets.MAPBOX_SECRET_TOKEN }}
          MAPBOX_PUBLIC_TOKEN: ${{ secrets.MAPBOX_PUBLIC_TOKEN }}
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
          AZURE_MAPS_SUBSCRIPTION_KEY: ${{ secrets.AZURE_MAPS_SUBSCRIPTION_KEY }}

      - name: Cache turborepo for Android
        uses: actions/cache@v4
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turborepo-android-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-turborepo-android-

      - name: Check turborepo cache for Android
        run: |
          TURBO_CACHE_STATUS=$(node -p "($(yarn turbo run build:android:release --cache-dir="${{ env.TURBO_CACHE_DIR }}" --dry=json)).tasks.find(t => t.task === 'build:android:release').cache.status")

          if [[ $TURBO_CACHE_STATUS == "HIT" ]]; then
            echo "turbo_cache_hit=1" >> $GITHUB_ENV
          fi

      - name: Finalize Android SDK
        if: env.turbo_cache_hit != 1
        run: |
          /bin/bash -c "yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses > /dev/null"

      - name: Cache Gradle
        if: env.turbo_cache_hit != 1
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('apps/sample-app/android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build example for Android
        env:
          JAVA_OPTS: '-XX:MaxHeapSize=6g'
        run: |
          yarn turbo run build:android:release --cache-dir="${{ env.TURBO_CACHE_DIR }}"

      - name: Upload .apk
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: ${{ env.SAMPLE_APP_PATH }}/android/app/build/outputs/apk/release/app-release.apk

  build-ios-sample-app:
    name: Build iOS sample app

    runs-on: macos-14

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/iron'

      - name: Cache JS dependencies
        id: yarn-cache
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            .yarn/install-state.gz
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}-${{ hashFiles('**/package.json', '!node_modules/**') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
            ${{ runner.os }}-yarn-

      - name: Install JS dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --immutable
        shell: bash

      - name: Install Gems
        run: |
          cd ./apps/sample-app && bundle install
        shell: bash

      - name: Cache Pods
        uses: actions/cache@v4
        with:
          path: |
            **/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: install CocoaPods dependencies
        run: |
          cd ${{ env.SAMPLE_APP_PATH }}/ios
          pod repo update
          pod install

      - name: Setup Secrets
        env:
          IOS_SECRETS_BASE_64: ${{ secrets.IOS_SECRETS_BASE_64 }}
        run: |
          echo -n $IOS_SECRETS_BASE_64 | base64 --decode -o ./apps/sample-app/ios/Secrets.xcconfig
        shell: bash

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build archive
        run: |
          cd ${{ env.SAMPLE_APP_PATH }}/ios
          xcodebuild -workspace RnOmhMapsExample.xcworkspace \
          -scheme "RnOmhMapsExample" \
          -sdk iphoneos \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath $RUNNER_TEMP/RnOmhMapsExample.xcarchive \
          archive

      - name: Export ipa
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}

        run: |
          # create variables
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist

          # import profile lists from secrets
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH

          # extract .ipa
          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/RnOmhMapsExample.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build

      - name: Upload .ipa
        uses: actions/upload-artifact@v4
        with:
          name: ipa
          path: ${{ runner.temp }}/build/RnOmhMapsExample.ipa

  deploy-android-and-ios-sample-app:
    name: Deploy Android and iOS Sample App to AppCenter

    needs: [build-android-sample-app, build-ios-sample-app]

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download .apk & .ipa files
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Upload .apk to App Center
        uses: wzieba/AppCenter-Github-Action@v1
        with:
          appName: ${{ secrets.APP_CENTER_APP_NAME }}
          group: ${{ secrets.APP_CENTER_GROUP }}
          token: ${{ secrets.APP_CENTER_TOKEN }}
          file: app-release.apk
          notifyTesters: true
          debug: true
          gitReleaseNotes: true

      - name: Upload ipa to AppCenter
        uses: wzieba/AppCenter-Github-Action@v1
        with:
          appName: ${{ secrets.APP_CENTER_APP_NAME_IOS }}
          group: ${{ secrets.APP_CENTER_GROUP }}
          token: ${{ secrets.APP_CENTER_TOKEN_IOS }}
          file: RnOmhMapsExample.ipa
          notifyTesters: true
          debug: true
          gitReleaseNotes: true

  check-version:
    name: Check if version changed

    runs-on: ubuntu-latest

    outputs:
      package_version: ${{ steps.check_version.outputs.package_version }}
      version_changed: ${{ steps.check_version.outputs.version_changed }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if version changed
        id: check_version
        run: bash ./.github/scripts/check-version.sh

  publish-packages:
    name: Publish NPM packages

    needs: check-version

    runs-on: ubuntu-latest

    if: needs.check-version.outputs.version_changed == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/iron'

      - name: Enable corepack
        run: corepack enable

      - name: Cache JS dependencies
        id: yarn-cache
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            .yarn/install-state.gz
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}-${{ hashFiles('**/package.json', '!node_modules/**') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
            ${{ runner.os }}-yarn-

      - name: Install JS dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --immutable
        shell: bash

      - name: Build packages
        run: yarn build:packages

      - name: Setup NPM token
        run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish packages
        run: npx lerna publish from-package --no-changelog --yes

  create-release:
    name: Create Release and Upload Artifacts

    needs: [build-android-sample-app, build-ios-sample-app, check-version]

    runs-on: ubuntu-latest

    if: needs.check-version.outputs.version_changed == 'true'

    env:
      TAG_NAME: v${{ needs.check-version.outputs.package_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup git user
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "openmobilehub@users.noreply.github.com"

      - name: Create new tag
        run: |
          git tag ${{ env.TAG_NAME }}
          git push origin ${{ env.TAG_NAME }}

      - name: Download .apk & .ipa files
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Rename .apk & .ipa files
        run: |
          mv app-release.apk sample-app.apk
          mv RnOmhMapsExample.ipa sample-app.ipa

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: |
            sample-app.apk
            sample-app.ipa
